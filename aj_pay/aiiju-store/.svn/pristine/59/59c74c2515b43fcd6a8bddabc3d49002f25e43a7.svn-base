package com.aiiju.store.controller.rest;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.aiiju.common.pojo.Result;
import com.aiiju.pojo.ReputationShopInfo;
import com.aiiju.store.constant.WebConstant;
import com.aiiju.store.editor.DateEditor;
import com.aiiju.store.service.ReputationService;
import com.aiiju.store.util.AlipayUtil;
import com.alipay.api.AlipayClient;
import com.alipay.api.request.AlipayOfflineMarketShopCreateRequest;

/** 
 * @ClassName CreateShopController
 * @Description 口碑创店控制器
 * @author zong
 * @CreateDate 2017年5月25日 下午4:00:08
 */
@Controller
@RequestMapping("/reputation")
public class ReputationController {
	
	 private static Logger logger = Logger.getLogger(ReputationController.class);
	 static AlipayClient alipayClient =AlipayUtil.getAlipayClient();

	   @Value("${BASE_URL}")
	    private String operateNotifyUrl;
	 
	   
	   
	    @Autowired
	    private ReputationService reputationService;
	    
	    @InitBinder
	    public void initBinder(WebDataBinder binder){
	            binder.registerCustomEditor(Date.class, new DateEditor("yyyy-MM-dd HH:mm:ss"));
	    }

	

	    @RequestMapping("/getShopInfoByStoreId")
	    @ResponseBody
	    public Result getShopInfoByStoreId(String storeId) {
	        try {
	        	 return this.reputationService.getShopInfoByStoreId(storeId);
	        } catch (Exception e) {
	            logger.error(e.getMessage());
	            return Result.build(500, WebConstant.SYS_ERROR);
	        }
	    }
	    
	    
	    @RequestMapping("/getImageInfo")
	    @ResponseBody
	    public Result getImageInfo(String reputation_image_id) {
	        try {
	        	 return this.reputationService.getImageInfo(reputation_image_id);
	        } catch (Exception e) {
	            logger.error(e.getMessage());
	            return Result.build(500, WebConstant.SYS_ERROR);
	        }
	    }
	    @RequestMapping("/deleteImageInfo")
	    @ResponseBody
	    public Result deleteImageInfo(String reputation_image_id) {
	        try {
	        	 return this.reputationService.getImageInfo(reputation_image_id);
	        } catch (Exception e) {
	            logger.error(e.getMessage());
	            return Result.build(500, WebConstant.SYS_ERROR);
	        }
	    }
	    	    
	    
	    @RequestMapping("/createAndUpdateShop")
	    @ResponseBody
	    public Result createShop(ReputationShopInfo reputationShopInfo) {

	    	// 查询是否已创建，有则修改，无则新增；

	        try {
	        		AlipayOfflineMarketShopCreateRequest request = new AlipayOfflineMarketShopCreateRequest();

	        		ReputationShopInfo	returnObject =  this.reputationService.addOrUpdateShop(reputationShopInfo,request);

	        		if("2".equals(returnObject.getReview_status())){
	        			
	        			if("10000".equals(returnObject.getCode())){

	        				return Result.success(returnObject) ;
	        			}else{
	        				
	        				if(returnObject.getSub_msg()==null||"".equals(returnObject.getSub_msg())){
	        					return Result.success(returnObject) ;
	        				}else{
	        				 	 return Result.build(40004, returnObject.getSub_msg(),returnObject.getId());
	        				}

		                }
	        		}else{
	        			
	        			return Result.success(returnObject) ;
	        		}
	        		
	        } catch (Exception e) {
	            logger.error(e.getMessage());
	            return Result.build(500, WebConstant.SYS_ERROR);
	        }
	    }
	
	
	    
	    @RequestMapping("/getArea")
	    @ResponseBody
	    public Result getArea(Long id) {
	        try {
	            return this.reputationService.getAreaCode();
	        } catch (Exception e) {
	            logger.error(e.getMessage());
	            return Result.build(500, WebConstant.SYS_ERROR);
	        }
	    }

	    @RequestMapping("/getCategory")
	    @ResponseBody
	    public Result getCategory(Long id) {
	        try {
	        	 return this.reputationService.getCategoryId();
	        } catch (Exception e) {
	            logger.error(e.getMessage());
	            return Result.build(500, WebConstant.SYS_ERROR);
	        }
	    }

	    @RequestMapping("/upload")
	    @ResponseBody
	    public Result upload(MultipartFile uploadFile,String type,String storeId,String id) {
	    	try {
	    		
	    		if(id==null||"".equals(id)){
	    			return	this.reputationService.upload(uploadFile,type,storeId,0);
	    		}else{
	    			return	this.reputationService.upload(uploadFile,type,storeId,Integer.parseUnsignedInt(id));
	    		}
	    		
			
			} catch (Exception e) {
				logger.error(e.getMessage());
				return Result.build(500,WebConstant.SYS_ERROR);
			}
	    }

	    @RequestMapping("/operateNotifyUrl")
	    @ResponseBody
	    public Result operateNotifyUrl(HttpServletRequest request, HttpServletResponse response) {

	        ReputationShopInfo reputationShopInfo =new ReputationShopInfo();
	        
	        reputationShopInfo.setId(Integer.parseInt(request.getParameter("id")));
	        reputationShopInfo.setStore_id(request.getParameter("store_id"));
	    
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        
	        try {
				reputationShopInfo.setModify_date(sdf.parse(request.getParameter("notify_time")));
			} catch (ParseException e) {
				System.out.println("支付宝回调，日期转化错误");
				e.printStackTrace();
			}
	        reputationShopInfo.setResult_code(request.getParameter("result_code"));
	        reputationShopInfo.setResult_desc(request.getParameter("result_desc"));
	        
	        String audit_status = request.getParameter("audit_status");
	        
	        reputationShopInfo.setAudit_status(audit_status);
	        
	        
	        if(!"AUDIT_FAILED".equals(audit_status)){
	        	
	        	// 审核通过
	        	
	        	reputationShopInfo.setReview_status("1");
	        }else{
	        	//审核不通过
	        	
	        	reputationShopInfo.setReview_status("0");
	        }

	        reputationService.updateCreateShopResultMessage(reputationShopInfo);
	        
	        // 更新之后 将此审核结果推送到客户端
	        
	        
	        
	        System.out.println("已将支付宝回调审核 结果 信息更新数据库中");
	        
	        return Result.success();
	     
		    }
}