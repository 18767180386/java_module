package com.aiiju.store.controller.rest;

import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.aiiju.common.pojo.Result;
import com.aiiju.pojo.PAMerchant;
import com.aiiju.store.constant.WebConstant;
import com.aiiju.store.editor.DateEditor;
import com.aiiju.store.service.MerchantService;

/** 
 * @ClassName MerchantController
 * @Description
 * @author zong
 * @CreateDate 2017年7月19日 上午11:37:28
 */
@Controller
@RequestMapping("/merchant")
public class MerchantController {

	private static Logger logger = Logger.getLogger(MerchantController.class);
	
	@Autowired
	private MerchantService merchantService;
	
	
	
    @InitBinder
    public void initBinder(WebDataBinder binder){
            binder.registerCustomEditor(Date.class, new DateEditor("yyyy-MM-dd HH:mm:ss"));
    }

	

    @RequestMapping("/getMer")
    @ResponseBody
    public Result get(String storeId) {
        try {
        	 return this.merchantService.getMerchantInfo(storeId);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return Result.build(500, WebConstant.SYS_ERROR);
        }
    }
    
    @RequestMapping("/add")
    @ResponseBody
    public Result add(PAMerchant merchant) {
        try {
        	 return this.merchantService.add(merchant);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return Result.build(500, WebConstant.SYS_ERROR);
        }
    }
    
    @RequestMapping("/update")
    @ResponseBody
    public Result update(PAMerchant merchant,String updateType) {
        try {
        	 return this.merchantService.update(merchant,updateType);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return Result.build(500, WebConstant.SYS_ERROR);
        }
    }
    
    
    @RequestMapping("/upload")
    @ResponseBody
    public Result upload(MultipartFile uploadFile,String type,String storeId,String id) {
    	try {
    		
    		if(id==null||"".equals(id)){
    			return	this.merchantService.upload(uploadFile,type,storeId,0);
    		}else{
    			return	this.merchantService.upload(uploadFile,type,storeId,Integer.parseUnsignedInt(id));
    		}
    		
		
		} catch (Exception e) {
			logger.error(e.getMessage());
			return Result.build(500,WebConstant.SYS_ERROR);
		}
    }
    
    
    @RequestMapping("/getImageInfo")
    @ResponseBody
    public Result getImageInfo(String filePath) {
        try {
        	 return this.merchantService.getImageInfo(filePath);
        } catch (Exception e) {
            logger.error(e.getMessage());
            return Result.build(500, WebConstant.SYS_ERROR);
        }
    }
    
    
    @RequestMapping("/createMctClass")
    @ResponseBody
    public Result createMctClass(PAMerchant merchant) {
        try {
        	 return this.merchantService.createMctClass();
        } catch (Exception e) {
            logger.error(e.getMessage());
            return Result.build(500, WebConstant.SYS_ERROR);
        }
    }
    
    
    @RequestMapping("/getMctClass")
    @ResponseBody
    public Result getMctClass(PAMerchant merchant) {
        try {
        	 return this.merchantService.getMctClass();
        } catch (Exception e) {
            logger.error(e.getMessage());
            return Result.build(500, WebConstant.SYS_ERROR);
        }
    }
    
    
	
}
